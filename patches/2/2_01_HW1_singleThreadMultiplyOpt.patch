Index: src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java	(revision 2306fbe9700d2df86b864a80a1a97f92f61d8324)
+++ src/main/java/ru/javaops/masterjava/matrix/MatrixUtil.java	(revision )
@@ -18,18 +18,24 @@
         return matrixC;
     }
 
-    // TODO optimize by https://habrahabr.ru/post/114797/
-    public static int[][] singleThreadMultiply(int[][] matrixA, int[][] matrixB) {
+    // Optimized by https://habrahabr.ru/post/114797/
+    public static int[][] singleThreadMultiplyOpt(int[][] matrixA, int[][] matrixB) {
         final int matrixSize = matrixA.length;
         final int[][] matrixC = new int[matrixSize][matrixSize];
 
-        for (int i = 0; i < matrixSize; i++) {
-            for (int j = 0; j < matrixSize; j++) {
+        for (int col = 0; col < matrixSize; col++) {
+            final int[] columnB = new int[matrixSize];
+            for (int k = 0; k < matrixSize; k++) {
+                columnB[k] = matrixB[k][col];
+            }
+
+            for (int row = 0; row < matrixSize; row++) {
                 int sum = 0;
+                final int[] rowA = matrixA[row];
                 for (int k = 0; k < matrixSize; k++) {
-                    sum += matrixA[i][k] * matrixB[k][j];
+                    sum += rowA[k] * columnB[k];
                 }
-                matrixC[i][j] = sum;
+                matrixC[row][col] = sum;
             }
         }
         return matrixC;
Index: src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java	(revision 2306fbe9700d2df86b864a80a1a97f92f61d8324)
+++ src/main/java/ru/javaops/masterjava/matrix/MainMatrix.java	(revision )
@@ -24,7 +24,7 @@
         while (count < 6) {
             System.out.println("Pass " + count);
             long start = System.currentTimeMillis();
-            final int[][] matrixC = MatrixUtil.singleThreadMultiply(matrixA, matrixB);
+            final int[][] matrixC = MatrixUtil.singleThreadMultiplyOpt(matrixA, matrixB);
             double duration = (System.currentTimeMillis() - start) / 1000.;
             out("Single thread time, sec: %.3f", duration);
             singleThreadSum += duration;
