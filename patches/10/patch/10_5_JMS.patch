Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/jms/JmsListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/jms/JmsListener.java	(revision )
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/jms/JmsListener.java	(revision )
@@ -0,0 +1,63 @@
+package ru.javaops.masterjava.service.mail.jms;
+
+import lombok.extern.slf4j.Slf4j;
+
+import javax.jms.*;
+import javax.naming.InitialContext;
+import javax.servlet.ServletContextEvent;
+import javax.servlet.ServletContextListener;
+import javax.servlet.annotation.WebListener;
+
+@WebListener
+@Slf4j
+public class JmsListener implements ServletContextListener {
+    private Thread listenerThread = null;
+    private QueueConnection connection;
+
+    @Override
+    public void contextInitialized(ServletContextEvent sce) {
+        try {
+            InitialContext initCtx = new InitialContext();
+            QueueConnectionFactory connectionFactory =
+                    (QueueConnectionFactory) initCtx.lookup("java:comp/env/jms/ConnectionFactory");
+            connection = connectionFactory.createQueueConnection();
+            QueueSession queueSession = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
+            Queue queue = (Queue) initCtx.lookup("java:comp/env/jms/queue/MailQueue");
+            QueueReceiver receiver = queueSession.createReceiver(queue);
+            connection.start();
+            log.info("Listen JMS messages ...");
+            listenerThread = new Thread(() -> {
+                try {
+                    while (!Thread.interrupted()) {
+                        Message m = receiver.receive();
+                        // TODO implement mail sending
+                        if (m instanceof TextMessage) {
+                            TextMessage tm = (TextMessage) m;
+                            String text = tm.getText();
+                            log.info(String.format("Received TextMessage with text '%s'.", text));
+                        }
+                    }
+                } catch (Exception e) {
+                    log.error("Receiving messages failed: " + e.getMessage(), e);
+                }
+            });
+            listenerThread.start();
+        } catch (Exception e) {
+            log.error("JMS failed: " + e.getMessage(), e);
+        }
+    }
+
+    @Override
+    public void contextDestroyed(ServletContextEvent sce) {
+        if (connection != null) {
+            try {
+                connection.close();
+            } catch (JMSException ex) {
+                log.warn("Couldn't close JMSConnection: ", ex);
+            }
+        }
+        if (listenerThread != null) {
+            listenerThread.interrupt();
+        }
+    }
+}
\ No newline at end of file
Index: web/webapp/src/main/java/ru/javaops/masterjava/webapp/JmsSendServlet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/java/ru/javaops/masterjava/webapp/JmsSendServlet.java	(revision )
+++ web/webapp/src/main/java/ru/javaops/masterjava/webapp/JmsSendServlet.java	(revision )
@@ -0,0 +1,71 @@
+package ru.javaops.masterjava.webapp;
+
+import lombok.extern.slf4j.Slf4j;
+
+import javax.jms.*;
+import javax.naming.InitialContext;
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.WebServlet;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.lang.IllegalStateException;
+
+@WebServlet("/sendJms")
+@Slf4j
+public class JmsSendServlet extends HttpServlet {
+    private Connection connection;
+    private Session session;
+    private MessageProducer producer;
+
+    @Override
+    public void init(ServletConfig config) throws ServletException {
+        super.init(config);
+        try {
+            InitialContext initCtx = new InitialContext();
+            ConnectionFactory connectionFactory = (ConnectionFactory) initCtx.lookup("java:comp/env/jms/ConnectionFactory");
+            connection = connectionFactory.createConnection();
+            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
+            producer = session.createProducer((Destination) initCtx.lookup("java:comp/env/jms/queue/MailQueue"));
+        } catch (Exception e) {
+            throw new IllegalStateException("JMS init failed", e);
+        }
+    }
+
+    @Override
+    public void destroy() {
+        if (connection != null) {
+            try {
+                connection.close();
+            } catch (JMSException ex) {
+                log.warn("Couldn't close JMSConnection: ", ex);
+            }
+        }
+    }
+
+    @Override
+    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
+        req.setCharacterEncoding("UTF-8");
+        String users = req.getParameter("users");
+        String subject = req.getParameter("subject");
+        String body = req.getParameter("body");
+        resp.getWriter().write(sendJms(users, subject, body));
+    }
+
+    private synchronized String sendJms(String users, String subject, String body) {
+        String msg;
+        try {
+            TextMessage testMessage = session.createTextMessage();
+            testMessage.setText(subject);
+            producer.send(testMessage);
+            msg = "Successfully sent message.";
+            log.info(msg);
+        } catch (Exception e) {
+            msg = "Sending JMS message failed: " + e.getMessage();
+            log.error(msg, e);
+        }
+        return msg;
+    }
+}
\ No newline at end of file
Index: web/webapp/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/pom.xml	(date 1494010500000)
+++ web/webapp/pom.xml	(revision )
@@ -31,5 +31,18 @@
             <artifactId>mail-api</artifactId>
             <version>${project.version}</version>
         </dependency>
+
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-client</artifactId>
+            <scope>provided</scope>
+            <version>5.14.3</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.slf4j</groupId>
+                    <artifactId>slf4j-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
     </dependencies>
 </project>
\ No newline at end of file
Index: config_templates/context.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config_templates/context.xml	(date 1494010500000)
+++ config_templates/context.xml	(revision )
@@ -46,4 +46,18 @@
               password="password"
               url="jdbc:postgresql://localhost:5432/masterjava"/>
 
+    <Resource name="jms/ConnectionFactory"
+              auth="Container"
+              type="org.apache.activemq.ActiveMQConnectionFactory"
+              factory="org.apache.activemq.jndi.JNDIReferenceFactory"
+              brokerURL="failover:(vm://localhost)"
+              brokerName="LocalActiveMQBroker"
+              useEmbeddedBroker="true"/>
+
+    <Resource name="jms/queue/MailQueue"
+              auth="Container"
+              type="org.apache.activemq.command.ActiveMQQueue"
+              factory="org.apache.activemq.jndi.JNDIReferenceFactory"
+              physicalName="MAIL.QUEUE"/>
+
 </Context>
Index: web/webapp/src/main/webapp/WEB-INF/templates/users.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/webapp/src/main/webapp/WEB-INF/templates/users.html	(date 1494010500000)
+++ web/webapp/src/main/webapp/WEB-INF/templates/users.html	(revision )
@@ -38,6 +38,7 @@
     <hr/>
     <input type="radio" name="transport" onchange="setFormAttr('SOAP')" checked>SOAP<br>
     <input type="radio" name="transport" onchange="setFormAttr('REST')">REST<br>
+    <input type="radio" name="transport" onchange="setFormAttr('JMS')">JMS<br>
 
     <form enctype="multipart/form-data" action="send" method=post
           target="result" onsubmit="window.open('','result','width=800,height=400,menubar=no');">
@@ -67,6 +68,9 @@
         } else if(transport == 'REST'){
             form.attr("action", '/mail/rest/send');
             form.attr("enctype", 'application/x-www-form-urlencoded');
+        } else {
+            form.attr("action", 'sendJms');
+            form.attr("enctype", 'application/x-www-form-urlencoded');
         }
     }
 
Index: services/mail-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/pom.xml	(date 1494010500000)
+++ services/mail-service/pom.xml	(revision )
@@ -90,5 +90,18 @@
             <artifactId>jersey-bean-validation</artifactId>
             <version>2.25.1</version>
         </dependency>
+
+        <dependency>
+            <groupId>org.apache.activemq</groupId>
+            <artifactId>activemq-all</artifactId>
+            <version>5.14.5</version>
+            <scope>provided</scope>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.slf4j</groupId>
+                    <artifactId>slf4j-api</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
     </dependencies>
 </project>
\ No newline at end of file
