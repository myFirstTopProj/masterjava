Index: services/common-ws/src/main/java/ru/javaops/web/handler/SoapLoggingHandler.java
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/handler/SoapLoggingHandler.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/common-ws/src/main/java/ru/javaops/web/handler/SoapLoggingHandlers.java	(revision )
@@ -25,11 +25,11 @@
  * for better performance over SOAPHandler.
  */
 @Slf4j
-public abstract class SoapLoggingHandler extends SoapBaseHandler {
+public abstract class SoapLoggingHandlers extends SoapBaseHandler {
 
     private final Level loggingLevel;
 
-    protected SoapLoggingHandler(Level loggingLevel) {
+    protected SoapLoggingHandlers(Level loggingLevel) {
         this.loggingLevel = loggingLevel;
     }
 
@@ -117,4 +117,27 @@
         HANDLER_MAP.get(loggingLevel).handleFault(mhc);
         return true;
     }
+
+    public static class ClientHandler extends SoapLoggingHandlers {
+        public ClientHandler(Level loggingLevel) {
+            super(loggingLevel);
+        }
+
+        @Override
+        protected boolean isRequest(boolean isOutbound) {
+            return isOutbound;
+        }
+    }
+
+    public static class ServerHandler extends SoapLoggingHandlers {
+
+        public ServerHandler() {
+            super(Level.INFO);
+        }
+
+        @Override
+        protected boolean isRequest(boolean isOutbound) {
+            return !isOutbound;
+        }
+    }
 }
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailHandlers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailHandlers.java	(revision )
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailHandlers.java	(revision )
@@ -0,0 +1,11 @@
+package ru.javaops.masterjava.service.mail;
+
+import ru.javaops.web.handler.SoapServerSecurityHandler;
+
+public class MailHandlers {
+    public static class SecurityHandler extends SoapServerSecurityHandler {
+        public SecurityHandler() {
+            super(MailWSClient.USER, MailWSClient.PASSWORD);
+        }
+    }
+}
Index: services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/mail-service/src/main/java/ru/javaops/masterjava/service/mail/MailServiceImpl.java	(revision )
@@ -1,41 +1,39 @@
 package ru.javaops.masterjava.service.mail;
 
-import ru.javaops.web.AuthUtil;
 import ru.javaops.web.WebStateException;
 
-import javax.annotation.Resource;
 import javax.jws.HandlerChain;
 import javax.jws.WebService;
-import javax.xml.ws.WebServiceContext;
-import javax.xml.ws.handler.MessageContext;
+import javax.xml.ws.soap.MTOM;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 @WebService(endpointInterface = "ru.javaops.masterjava.service.mail.MailService", targetNamespace = "http://mail.javaops.ru/"
 //          , wsdlLocation = "WEB-INF/wsdl/mailService.wsdl"
 )
 //@StreamingAttachment(parseEagerly=true, memoryThreshold=40000L)
-//@MTOM
+@MTOM
 @HandlerChain(file = "mailWsHandlers.xml")
 public class MailServiceImpl implements MailService {
 
-    @Resource
-    private WebServiceContext wsContext;
+//    @Resource
+//    private WebServiceContext wsContext;
 
     @Override
     public String sendToGroup(Set<Addressee> to, Set<Addressee> cc, String subject, String body, List<Attach> attaches) throws WebStateException {
+/*
         MessageContext mCtx = wsContext.getMessageContext();
         Map<String, List<String>> headers = (Map<String, List<String>>) mCtx.get(MessageContext.HTTP_REQUEST_HEADERS);
 
-//        HttpServletRequest request = (HttpServletRequest) mCtx.get(MessageContext.SERVLET_REQUEST);
-//        HttpServletResponse response = (HttpServletResponse) mCtx.get(MessageContext.SERVLET_RESPONSE);
+        HttpServletRequest request = (HttpServletRequest) mCtx.get(MessageContext.SERVLET_REQUEST);
+        HttpServletResponse response = (HttpServletResponse) mCtx.get(MessageContext.SERVLET_RESPONSE);
 
         int code = AuthUtil.checkBasicAuth(headers, MailWSClient.AUTH_HEADER);
         if (code != 0) {
             mCtx.put(MessageContext.HTTP_RESPONSE_CODE, code);
             throw new SecurityException();
         }
+*/
         return MailSender.sendToGroup(to, cc, subject, body, attaches);
     }
 
Index: services/common-ws/src/main/java/ru/javaops/web/handler/SoapClientLoggingHandler.java
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/handler/SoapClientLoggingHandler.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/common-ws/src/main/java/ru/javaops/web/handler/SoapClientLoggingHandler.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
@@ -1,15 +0,0 @@
-package ru.javaops.web.handler;
-
-
-import org.slf4j.event.Level;
-
-public class SoapClientLoggingHandler extends SoapLoggingHandler {
-    public SoapClientLoggingHandler(Level loggingLevel) {
-        super(loggingLevel);
-    }
-
-    @Override
-    protected boolean isRequest(boolean isOutbound) {
-        return isOutbound;
-    }
-}
\ No newline at end of file
Index: services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerLoggingHandler.java
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerLoggingHandler.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerLoggingHandler.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
@@ -1,16 +0,0 @@
-package ru.javaops.web.handler;
-
-
-import org.slf4j.event.Level;
-
-public class SoapServerLoggingHandler extends SoapLoggingHandler {
-
-    public SoapServerLoggingHandler() {
-        super(Level.INFO);
-    }
-
-    @Override
-    protected boolean isRequest(boolean isOutbound) {
-        return !isOutbound;
-    }
-}
\ No newline at end of file
Index: services/common-ws/src/main/java/ru/javaops/web/WsClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/WsClient.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/common-ws/src/main/java/ru/javaops/web/WsClient.java	(revision )
@@ -31,7 +31,7 @@
     }
 
     public void init(String host, String endpointAddress) {
-        this.endpointAddress = HOSTS.getString(host) + endpointAddress;
+        this.endpointAddress = HOSTS.getConfig(host).getString("endpoint") + endpointAddress;
     }
 
     //  Post is not thread-safe (http://stackoverflow.com/a/10601916/548473)
Index: services/common-ws/src/main/java/ru/javaops/web/handler/SoapStatisticHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/handler/SoapStatisticHandler.java	(revision )
+++ services/common-ws/src/main/java/ru/javaops/web/handler/SoapStatisticHandler.java	(revision )
@@ -0,0 +1,30 @@
+package ru.javaops.web.handler;
+
+import com.sun.xml.ws.api.handler.MessageHandlerContext;
+import ru.javaops.web.Statistics;
+
+public class SoapStatisticHandler extends SoapBaseHandler {
+
+    private static final String PAYLOAD = "PAYLOAD";
+    private static final String START_TIME = "START_TIME";
+
+    public boolean handleMessage(MessageHandlerContext context) {
+        if (isOutbound(context)) {
+            count(context, Statistics.RESULT.SUCCESS);
+        } else {
+            String payload = context.getMessage().getPayloadLocalPart();
+            context.put(PAYLOAD, payload);
+            context.put(START_TIME, System.currentTimeMillis());
+        }
+        return true;
+    }
+
+    public boolean handleFault(MessageHandlerContext context) {
+        count(context, Statistics.RESULT.FAIL);
+        return true;
+    }
+
+    private void count(MessageHandlerContext context, Statistics.RESULT result) {
+        Statistics.count((String) context.get(PAYLOAD), (Long) context.get(START_TIME), result);
+    }
+}
\ No newline at end of file
Index: services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerSecurityHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerSecurityHandler.java	(revision )
+++ services/common-ws/src/main/java/ru/javaops/web/handler/SoapServerSecurityHandler.java	(revision )
@@ -0,0 +1,43 @@
+package ru.javaops.web.handler;
+
+import com.sun.xml.ws.api.handler.MessageHandlerContext;
+import lombok.extern.slf4j.Slf4j;
+import ru.javaops.web.AuthUtil;
+
+import javax.xml.ws.handler.MessageContext;
+import java.util.List;
+import java.util.Map;
+
+import static ru.javaops.web.AuthUtil.encodeBasicAuthHeader;
+
+@Slf4j
+abstract public class SoapServerSecurityHandler extends SoapBaseHandler {
+
+    private String authHeader;
+
+    public SoapServerSecurityHandler(String user, String password) {
+        this(encodeBasicAuthHeader(user, password));
+    }
+
+    public SoapServerSecurityHandler(String authHeader) {
+        this.authHeader = authHeader;
+    }
+
+    @Override
+    public boolean handleMessage(MessageHandlerContext ctx) {
+        if (!isOutbound(ctx)) {
+            Map<String, List<String>> headers = (Map<String, List<String>>) ctx.get(MessageContext.HTTP_REQUEST_HEADERS);
+            int code = AuthUtil.checkBasicAuth(headers, authHeader);
+            if (code != 0) {
+                ctx.put(MessageContext.HTTP_RESPONSE_CODE, code);
+                throw new SecurityException();
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public boolean handleFault(MessageHandlerContext context) {
+        return true;
+    }
+}
Index: services/mail-service/src/main/resources/mailWsHandlers.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-service/src/main/resources/mailWsHandlers.xml	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/mail-service/src/main/resources/mailWsHandlers.xml	(revision )
@@ -2,7 +2,15 @@
 <handler-chain>
     <handler>
         <handler-name>SoapLoggingHandler</handler-name>
-        <handler-class>ru.javaops.web.handler.SoapServerLoggingHandler</handler-class>
+        <handler-class>ru.javaops.web.handler.SoapLoggingHandlers$ServerHandler</handler-class>
+    </handler>
+    <handler>
+        <handler-name>SoapStatisticHandler</handler-name>
+        <handler-class>ru.javaops.web.handler.SoapStatisticHandler</handler-class>
+    </handler>
+    <handler>
+        <handler-name>SoapStatisticHandler</handler-name>
+        <handler-class>ru.javaops.masterjava.service.mail.MailHandlers$SecurityHandler</handler-class>
     </handler>
 </handler-chain>
 </handler-chains>
\ No newline at end of file
Index: services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/mail-api/src/main/java/ru/javaops/masterjava/service/mail/MailWSClient.java	(revision )
@@ -6,10 +6,9 @@
 import com.google.common.io.Resources;
 import lombok.extern.slf4j.Slf4j;
 import org.slf4j.event.Level;
-import ru.javaops.web.AuthUtil;
 import ru.javaops.web.WebStateException;
 import ru.javaops.web.WsClient;
-import ru.javaops.web.handler.SoapClientLoggingHandler;
+import ru.javaops.web.handler.SoapLoggingHandlers;
 
 import javax.xml.namespace.QName;
 import javax.xml.ws.soap.MTOMFeature;
@@ -21,9 +20,7 @@
     private static final WsClient<MailService> WS_CLIENT;
     public static final String USER = "user";
     public static final String PASSWORD = "password";
-    private static final SoapClientLoggingHandler LOGGING_HANDLER = new SoapClientLoggingHandler(Level.DEBUG);
-
-    public static String AUTH_HEADER = AuthUtil.encodeBasicAuthHeader(USER, PASSWORD);
+    private static final SoapLoggingHandlers.ClientHandler LOGGING_HANDLER = new SoapLoggingHandlers.ClientHandler(Level.DEBUG);
 
     static {
         WS_CLIENT = new WsClient<MailService>(Resources.getResource("wsdl/mailService.wsdl"),
Index: services/common-ws/src/main/java/ru/javaops/web/AuthUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- services/common-ws/src/main/java/ru/javaops/web/AuthUtil.java	(revision 52524e425e74665e0bda77f03f6ee2c565b7353c)
+++ services/common-ws/src/main/java/ru/javaops/web/AuthUtil.java	(revision )
@@ -7,9 +7,10 @@
 import java.util.List;
 import java.util.Map;
 
+import static com.google.common.net.HttpHeaders.AUTHORIZATION;
+
 @Slf4j
 public class AuthUtil {
-    private static final String AUTHORIZATION = "Authorization";
 
     public static String encodeBasicAuthHeader(String name, String passw) {
         String authString = name + ":" + passw;
