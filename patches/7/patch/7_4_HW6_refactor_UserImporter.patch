Index: persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(date 1492203480000)
+++ persist/src/main/java/ru/javaops/masterjava/persist/dao/UserDao.java	(revision )
@@ -61,11 +61,11 @@
     public abstract int[] insertBatch(@BindBean List<User> users, @BatchChunkSize int chunkSize);
 
 
-    public List<String> insertAndGetConflictEmails(List<User> users) {
+    public List<User> insertAndGetConflictEmails(List<User> users) {
         int[] result = insertBatch(users, users.size());
         return IntStreamEx.range(0, users.size())
                 .filter(i -> result[i] == 0)
-                .mapToObj(index -> users.get(index).getEmail())
+                .mapToObj(users::get)
                 .toList();
     }
 }
Index: web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java	(date 1492203480000)
+++ web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java	(revision )
@@ -1,40 +1,42 @@
 package ru.javaops.masterjava.export;
 
+import com.google.common.base.Splitter;
+import lombok.Value;
 import lombok.extern.slf4j.Slf4j;
+import lombok.val;
 import one.util.streamex.StreamEx;
 import ru.javaops.masterjava.export.PayloadImporter.FailedEmail;
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.dao.UserDao;
-import ru.javaops.masterjava.persist.model.City;
-import ru.javaops.masterjava.persist.model.Group;
-import ru.javaops.masterjava.persist.model.User;
-import ru.javaops.masterjava.persist.model.UserFlag;
+import ru.javaops.masterjava.persist.dao.UserGroupDao;
+import ru.javaops.masterjava.persist.model.*;
 import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.events.XMLEvent;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 
-/**
- * gkislin
- * 14.10.2016
- */
 @Slf4j
 public class UserImporter {
 
     private static final int NUMBER_THREADS = 4;
     private final ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_THREADS);
     private final UserDao userDao = DBIProvider.getDao(UserDao.class);
+    private UserGroupDao userGroupDao = DBIProvider.getDao(UserGroupDao.class);
 
     public List<FailedEmail> process(StaxStreamProcessor processor, Map<String, Group> groups, Map<String, City> cities, int chunkSize) throws XMLStreamException {
         log.info("Start proseccing with chunkSize=" + chunkSize);
 
+        @Value
+        class ChunkItem {
+            private User user;
+            private StreamEx<UserGroup> userGroups;
+        }
+
         return new Callable<List<FailedEmail>>() {
             class ChunkFuture {
                 String emailRange;
@@ -51,11 +53,10 @@
 
             @Override
             public List<FailedEmail> call() throws XMLStreamException {
-                List<ChunkFuture> futures = new ArrayList<>();
-
+                val futures = new ArrayList<ChunkFuture>();
                 int id = userDao.getSeqAndSkip(chunkSize);
-                List<User> chunk = new ArrayList<>(chunkSize);
-                List<FailedEmail> failed = new ArrayList<>();
+                List<ChunkItem> chunk = new ArrayList<>(chunkSize);
+                val failed = new ArrayList<FailedEmail>();
 
                 while (processor.doUntil(XMLEvent.START_ELEMENT, "User")) {
                     final String email = processor.getAttribute("email");
@@ -64,14 +65,24 @@
                     if (city == null) {
                         failed.add(new FailedEmail(email, "City '" + cityRef + "' is not present in DB"));
                     } else {
-                        final UserFlag flag = UserFlag.valueOf(processor.getAttribute("flag"));
-                        final String fullName = processor.getReader().getElementText();
-                        final User user = new User(id++, fullName, email, flag, city.getId());
-                        chunk.add(user);
-                        if (chunk.size() == chunkSize) {
-                            futures.add(submit(chunk));
-                            chunk = new ArrayList<>(chunkSize);
-                            id = userDao.getSeqAndSkip(chunkSize);
+                        val groupRefs = processor.getAttribute("groupRefs");
+                        List<String> groupNames = (groupRefs == null) ?
+                                Collections.emptyList() :
+                                Splitter.on(' ').splitToList(groupRefs);
+
+                        if (!groups.keySet().containsAll(groupNames)) {
+                            failed.add(new FailedEmail(email, "One of group from '" + groupRefs + "' is not present in DB"));
+                        } else {
+                            final UserFlag flag = UserFlag.valueOf(processor.getAttribute("flag"));
+                            final String fullName = processor.getText();
+                            final User user = new User(id++, fullName, email, flag, city.getId());
+                            StreamEx<UserGroup> userGroups = StreamEx.of(groupNames).map(name -> new UserGroup(user.getId(), groups.get(name).getId()));
+                            chunk.add(new ChunkItem(user, userGroups));
+                            if (chunk.size() == chunkSize) {
+                                futures.add(submit(chunk));
+                                chunk = new ArrayList<>(chunkSize);
+                                id = userDao.getSeqAndSkip(chunkSize);
+                            }
                         }
                     }
                 }
@@ -92,9 +103,20 @@
                 return failed;
             }
 
-            private ChunkFuture submit(List<User> chunk) {
-                ChunkFuture chunkFuture = new ChunkFuture(chunk,
-                        executorService.submit(() -> userDao.insertAndGetConflictEmails(chunk))
+            private ChunkFuture submit(List<ChunkItem> chunk) {
+                val users = StreamEx.of(chunk).map(ChunkItem::getUser).toList();
+                ChunkFuture chunkFuture = new ChunkFuture(
+                        users,
+                        executorService.submit(() -> {
+                            List<User> alreadyPresents = userDao.insertAndGetConflictEmails(users);
+                            Set<Integer> alreadyPresentsIds = StreamEx.of(alreadyPresents).map(User::getId).toSet();
+                            userGroupDao.insertBatch(
+                                    StreamEx.of(chunk).flatMap(ChunkItem::getUserGroups)
+                                            .filter(ug -> !alreadyPresentsIds.contains(ug.getUserId()))
+                                            .toList()
+                            );
+                            return StreamEx.of(alreadyPresents).map(User::getEmail).toList();
+                        })
                 );
                 log.info("Submit " + chunkFuture.emailRange);
                 return chunkFuture;
