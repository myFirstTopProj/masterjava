Index: web/export/src/main/java/ru/javaops/masterjava/export/ProjectGroupImporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/export/src/main/java/ru/javaops/masterjava/export/ProjectGroupImporter.java	(revision )
+++ web/export/src/main/java/ru/javaops/masterjava/export/ProjectGroupImporter.java	(revision )
@@ -0,0 +1,53 @@
+package ru.javaops.masterjava.export;
+
+import lombok.extern.slf4j.Slf4j;
+import lombok.val;
+import ru.javaops.masterjava.persist.DBIProvider;
+import ru.javaops.masterjava.persist.dao.GroupDao;
+import ru.javaops.masterjava.persist.dao.ProjectDao;
+import ru.javaops.masterjava.persist.model.Group;
+import ru.javaops.masterjava.persist.model.GroupType;
+import ru.javaops.masterjava.persist.model.Project;
+import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.events.XMLEvent;
+import java.util.ArrayList;
+import java.util.Map;
+
+@Slf4j
+public class ProjectGroupImporter {
+    private final ProjectDao projectDao = DBIProvider.getDao(ProjectDao.class);
+    private final GroupDao groupDao = DBIProvider.getDao(GroupDao.class);
+
+    public Map<String, Group> process(StaxStreamProcessor processor) throws XMLStreamException {
+        val projectMap = projectDao.getAsMap();
+        val groupMap = groupDao.getAsMap();
+        String element;
+
+        val newGroups = new ArrayList<Group>();
+        Project project = null;
+        while ((element = processor.doUntilAny(XMLEvent.START_ELEMENT, "Project", "Group", "Cities")) != null) {
+            if (element.equals("Cities")) break;
+            if (element.equals("Project")) {
+                val name = processor.getAttribute("name");
+                val description = processor.getElementValue("description");
+                project = projectMap.get(name);
+                if (project == null) {
+                    project = new Project(name, description);
+                    log.info("Insert project " + project);
+                    projectDao.insert(project);
+                }
+            } else {
+                val name = processor.getAttribute("name");
+                if (!groupMap.containsKey(name)) {
+                    // project here already assigned, as it located in xml before Group
+                    newGroups.add(new Group(name, GroupType.valueOf(processor.getAttribute("type")), project.getId()));
+                }
+            }
+        }
+        log.info("Insert groups " + newGroups);
+        groupDao.insertBatch(newGroups);
+        return groupDao.getAsMap();
+    }
+}
Index: persist/src/main/java/ru/javaops/masterjava/persist/dao/GroupDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- persist/src/main/java/ru/javaops/masterjava/persist/dao/GroupDao.java	(date 1492187817000)
+++ persist/src/main/java/ru/javaops/masterjava/persist/dao/GroupDao.java	(revision )
@@ -2,13 +2,11 @@
 
 import com.bertoncelj.jdbi.entitymapper.EntityMapperFactory;
 import one.util.streamex.StreamEx;
-import org.skife.jdbi.v2.sqlobject.BindBean;
-import org.skife.jdbi.v2.sqlobject.GetGeneratedKeys;
-import org.skife.jdbi.v2.sqlobject.SqlQuery;
-import org.skife.jdbi.v2.sqlobject.SqlUpdate;
+import org.skife.jdbi.v2.sqlobject.*;
 import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapperFactory;
 import ru.javaops.masterjava.persist.model.Group;
 
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -34,4 +32,7 @@
         int id = insertGeneratedId(groups);
         groups.setId(id);
     }
+
+    @SqlBatch("INSERT INTO groups (name, type, project_id) VALUES (:name, CAST(:type AS group_type), :projectId)")
+    public abstract void insertBatch(@BindBean Collection<Group> groups);
 }
Index: web/export/src/main/java/ru/javaops/masterjava/export/PayloadImporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/export/src/main/java/ru/javaops/masterjava/export/PayloadImporter.java	(date 1492187817000)
+++ web/export/src/main/java/ru/javaops/masterjava/export/PayloadImporter.java	(revision )
@@ -9,6 +9,7 @@
 import java.util.List;
 
 public class PayloadImporter {
+    private final ProjectGroupImporter projectGroupImporter = new ProjectGroupImporter();
     private final CityImporter cityImporter = new CityImporter();
     private final UserImporter userImporter = new UserImporter();
 
@@ -25,7 +26,8 @@
 
     public List<PayloadImporter.FailedEmail> process(InputStream is, int chunkSize) throws XMLStreamException {
         final StaxStreamProcessor processor = new StaxStreamProcessor(is);
+        val groups = projectGroupImporter.process(processor);
         val cities = cityImporter.process(processor);
-        return userImporter.process(processor, cities, chunkSize);
+        return userImporter.process(processor, groups, cities, chunkSize);
     }
 }
Index: web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java	(date 1492187817000)
+++ web/export/src/main/java/ru/javaops/masterjava/export/UserImporter.java	(revision )
@@ -6,6 +6,7 @@
 import ru.javaops.masterjava.persist.DBIProvider;
 import ru.javaops.masterjava.persist.dao.UserDao;
 import ru.javaops.masterjava.persist.model.City;
+import ru.javaops.masterjava.persist.model.Group;
 import ru.javaops.masterjava.persist.model.User;
 import ru.javaops.masterjava.persist.model.UserFlag;
 import ru.javaops.masterjava.xml.util.StaxStreamProcessor;
@@ -31,7 +32,7 @@
     private final ExecutorService executorService = Executors.newFixedThreadPool(NUMBER_THREADS);
     private final UserDao userDao = DBIProvider.getDao(UserDao.class);
 
-    public List<FailedEmail> process(StaxStreamProcessor processor, Map<String, City> cities, int chunkSize) throws XMLStreamException {
+    public List<FailedEmail> process(StaxStreamProcessor processor, Map<String, Group> groups, Map<String, City> cities, int chunkSize) throws XMLStreamException {
         log.info("Start proseccing with chunkSize=" + chunkSize);
 
         return new Callable<List<FailedEmail>>() {
